// Geo-Notes Application
// Qu·∫£n l√Ω ghi ch√∫ theo v·ªã tr√≠ - ch·ªçn tr·ª±c ti·∫øp tr√™n b·∫£n ƒë·ªì

class GeoNotes {
    constructor() {
        this.notes = JSON.parse(localStorage.getItem('geoNotes')) || [];
        this.map = null;
        this.selectedLocation = null;
        this.markers = [];
        this.currentNoteId = null;
        this.selectedMarker = null;

        this.init();
    }

    init() {
        this.initMap();
        this.bindEvents();
        this.renderNotesList();
        this.updateNotesCount();
        this.setupMapClickHandler();
        this.showInitialStatus();
    }

    showInitialStatus() {
        const status = document.getElementById('locationStatus');
        status.textContent = 'üó∫Ô∏è Nh·∫•n v√†o b·∫£n ƒë·ªì ƒë·ªÉ ch·ªçn v·ªã tr√≠ t·∫°o ghi ch√∫';
        status.className = 'location-status';
    }    // Kh·ªüi t·∫°o b·∫£n ƒë·ªì Leaflet
    initMap() {
        // V·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi)
        const defaultLat = 21.0285;
        const defaultLng = 105.8542;

        this.map = L.map('map').setView([defaultLat, defaultLng], 13);

        // Th√™m tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(this.map);

        // Hi·ªÉn th·ªã c√°c ghi ch√∫ hi·ªán c√≥ tr√™n b·∫£n ƒë·ªì
        this.displayNotesOnMap();
    }

    // Thi·∫øt l·∫≠p x·ª≠ l√Ω click tr√™n b·∫£n ƒë·ªì
    setupMapClickHandler() {
        this.map.on('click', (e) => {
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;

            this.selectLocation(lat, lng);
        });
    }

    // Ch·ªçn v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì
    selectLocation(lat, lng) {
        this.selectedLocation = { lat, lng };

        // X√≥a marker c≈© n·∫øu c√≥
        if (this.selectedMarker) {
            this.map.removeLayer(this.selectedMarker);
        }

        // Th√™m marker m·ªõi
        this.selectedMarker = L.marker([lat, lng], {
            icon: L.divIcon({
                className: 'selected-location-marker',
                html: 'üìç',
                iconSize: [35, 35],
                iconAnchor: [17, 17]
            })
        }).addTo(this.map).bindPopup('V·ªã tr√≠ ƒë√£ ch·ªçn - Nh·∫≠p ghi ch√∫ v√† nh·∫•n Check-in');

        // C·∫≠p nh·∫≠t status
        const status = document.getElementById('locationStatus');
        status.textContent = `üìç ƒê√£ ch·ªçn v·ªã tr√≠: ${lat.toFixed(6)}, ${lng.toFixed(6)}`;
        status.className = 'location-status success';

        // L·∫•y ƒë·ªãa ch·ªâ cho v·ªã tr√≠ ƒë√£ ch·ªçn
        this.getAddressForSelectedLocation();

        // M·ªü popup
        this.selectedMarker.openPopup();
    }

    // L·∫•y ƒë·ªãa ch·ªâ cho v·ªã tr√≠ ƒë√£ ch·ªçn
    async getAddressForSelectedLocation() {
        if (!this.selectedLocation) return;

        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${this.selectedLocation.lat}&lon=${this.selectedLocation.lng}&zoom=18&addressdetails=1`);
            const data = await response.json();

            if (data && data.display_name) {
                const status = document.getElementById('locationStatus');
                status.textContent = `üìç ${data.display_name}`;
                status.className = 'location-status success';
            }
        } catch (error) {
            console.error('L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:', error);
        }
    }    // Bind s·ª± ki·ªán cho c√°c n√∫t
    bindEvents() {
        document.getElementById('checkinBtn').addEventListener('click', () => this.createNote());
        document.getElementById('radiusFilter').addEventListener('change', (e) => this.filterNotesByRadius(e.target.value));
        document.getElementById('centerMapBtn').addEventListener('click', () => this.centerMapToDefault());
        document.getElementById('openInMapsBtn').addEventListener('click', () => this.openInGoogleMaps());
        document.getElementById('deleteNoteBtn').addEventListener('click', () => this.deleteNote());

        // Th√™m search functionality
        document.getElementById('searchBtn').addEventListener('click', () => this.searchLocation());
        document.getElementById('locationSearch').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.searchLocation();
            }
        });

        // Th√™m n√∫t x√≥a v·ªã tr√≠ ƒë√£ ch·ªçn
        const clearBtn = document.createElement('button');
        clearBtn.className = 'btn-secondary';
        clearBtn.innerHTML = '<span class="icon">üóëÔ∏è</span>X√≥a v·ªã tr√≠ ƒë√£ ch·ªçn';
        clearBtn.onclick = () => this.clearSelectedLocation();
        document.querySelector('.form-actions').appendChild(clearBtn);
    }

    // X√≥a v·ªã tr√≠ ƒë√£ ch·ªçn
    clearSelectedLocation() {
        if (this.selectedMarker) {
            this.map.removeLayer(this.selectedMarker);
            this.selectedMarker = null;
        }

        this.selectedLocation = null;
        this.showInitialStatus();
    }

    // ƒê∆∞a b·∫£n ƒë·ªì v·ªÅ v·ªã tr√≠ m·∫∑c ƒë·ªãnh
    centerMapToDefault() {
        this.map.setView([21.0285, 105.8542], 13);
    }

    // S·ª≠ d·ª•ng v·ªã tr√≠ demo
    useDemoLocation() {
        // V·ªã tr√≠ demo t·∫°i H√† N·ªôi (H·ªì G∆∞∆°m)
        const demoLocations = [
            { lat: 21.0285, lng: 105.8542, name: "H·ªì G∆∞∆°m, H√† N·ªôi" },
            { lat: 21.0077, lng: 105.8431, name: "VƒÉn Mi·∫øu, H√† N·ªôi" },
            { lat: 21.0245, lng: 105.8412, name: "Nh√† th·ªù l·ªõn H√† N·ªôi" },
            { lat: 10.7769, lng: 106.7009, name: "B·∫øn Th√†nh, TP.HCM" },
            { lat: 16.0544, lng: 108.2022, name: "C·∫ßu R·ªìng, ƒê√† N·∫µng" }
        ];

        const randomLocation = demoLocations[Math.floor(Math.random() * demoLocations.length)];

        this.userLocation = {
            lat: randomLocation.lat,
            lng: randomLocation.lng
        };

        const status = document.getElementById('locationStatus');
        status.textContent = `üéØ ƒêang d√πng v·ªã tr√≠ demo: ${randomLocation.name} (${randomLocation.lat.toFixed(6)}, ${randomLocation.lng.toFixed(6)})`;
        status.className = 'location-status success';

        // C·∫≠p nh·∫≠t b·∫£n ƒë·ªì
        this.map.setView([randomLocation.lat, randomLocation.lng], 15);

        // Th√™m marker v·ªã tr√≠ demo
        if (this.userMarker) {
            this.map.removeLayer(this.userMarker);
        }

        this.userMarker = L.marker([randomLocation.lat, randomLocation.lng], {
            icon: L.divIcon({
                className: 'user-location-marker',
                html: 'üéØ',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            })
        }).addTo(this.map).bindPopup(`V·ªã tr√≠ demo: ${randomLocation.name}`);
    }    // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    getCurrentLocation() {
        const status = document.getElementById('locationStatus');
        status.textContent = 'ƒêang ki·ªÉm tra geolocation...';
        status.className = 'location-status loading';

        // Debug info
        console.log('üîç Checking geolocation support...');
        console.log('Navigator geolocation available:', !!navigator.geolocation);
        console.log('Is HTTPS:', location.protocol === 'https:');
        console.log('Current origin:', location.origin);

        if (!navigator.geolocation) {
            this.showLocationError('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation. H√£y d√πng n√∫t "D√πng v·ªã tr√≠ demo"');
            this.autoFallbackToDemo();
            return;
        }

        status.textContent = 'ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p v·ªã tr√≠...';
        console.log('üéØ Requesting geolocation permission...');

        const options = {
            enableHighAccuracy: false, // Th·ª≠ v·ªõi false tr∆∞·ªõc
            timeout: 15000, // TƒÉng timeout
            maximumAge: 600000 // 10 ph√∫t
        };

        navigator.geolocation.getCurrentPosition(
            (position) => {
                console.log('‚úÖ Geolocation success:', position);
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                const accuracy = position.coords.accuracy;

                this.userLocation = { lat, lng };

                status.textContent = `üìç V·ªã tr√≠ th·ª±c: ${lat.toFixed(6)}, ${lng.toFixed(6)} (¬±${Math.round(accuracy)}m)`;
                status.className = 'location-status success';

                // C·∫≠p nh·∫≠t b·∫£n ƒë·ªì
                this.map.setView([lat, lng], 15);

                // Th√™m marker v·ªã tr√≠ hi·ªán t·∫°i
                if (this.userMarker) {
                    this.map.removeLayer(this.userMarker);
                }

                this.userMarker = L.marker([lat, lng], {
                    icon: L.divIcon({
                        className: 'user-location-marker',
                        html: 'üìç',
                        iconSize: [30, 30],
                        iconAnchor: [15, 15]
                    })
                }).addTo(this.map).bindPopup('V·ªã tr√≠ th·ª±c c·ªßa b·∫°n');
            },
            (error) => {
                console.error('‚ùå Geolocation error:', error);
                let errorMessage = 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ GPS';
                let detailMessage = '';

                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = 'Quy·ªÅn truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi';
                        detailMessage = 'H√£y ki·ªÉm tra settings browser ho·∫∑c d√πng v·ªã tr√≠ demo';
                        console.log('üö´ Permission denied - user blocked location access');
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng';
                        detailMessage = 'GPS c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông';
                        console.log('üì° Position unavailable - GPS might be off');
                        break;
                    case error.TIMEOUT:
                        errorMessage = 'H·∫øt th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠';
                        detailMessage = 'Th·ª≠ l·∫°i ho·∫∑c d√πng v·ªã tr√≠ demo';
                        console.log('‚è∞ Geolocation timeout');
                        break;
                    default:
                        console.log('‚ùì Unknown geolocation error');
                        break;
                }

                this.showLocationError(`${errorMessage}. ${detailMessage}`);
                this.autoFallbackToDemo();
            },
            options
        );
    }

    // T·ª± ƒë·ªông fallback sang demo
    autoFallbackToDemo() {
        setTimeout(() => {
            const status = document.getElementById('locationStatus');
            status.innerHTML = `
                <div style="margin-bottom: 10px;">‚ùå Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ GPS</div>
                <button onclick="app.useDemoLocation()" class="btn-secondary" style="padding: 8px 16px;">
                    üéØ D√πng v·ªã tr√≠ demo ngay
                </button>
            `;
            status.className = 'location-status error';
        }, 2000);
    }

    showLocationError(message) {
        const status = document.getElementById('locationStatus');
        status.textContent = `‚ùå ${message}`;
        status.className = 'location-status error';
    }    // T·∫°o ghi ch√∫ m·ªõi
    createNote() {
        const noteText = document.getElementById('noteText').value.trim();

        if (!noteText) {
            alert('Vui l√≤ng nh·∫≠p n·ªôi dung ghi ch√∫');
            return;
        }

        if (!this.selectedLocation) {
            alert('Vui l√≤ng ch·ªçn v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì tr∆∞·ªõc khi t·∫°o ghi ch√∫');
            return;
        }

        const note = {
            id: Date.now(),
            content: noteText,
            lat: this.selectedLocation.lat,
            lng: this.selectedLocation.lng,
            timestamp: new Date().toISOString(),
            address: null // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
        };

        // Th√™m ghi ch√∫
        this.notes.push(note);
        this.saveNotes();

        // C·∫≠p nh·∫≠t UI
        this.renderNotesList();
        this.updateNotesCount();
        this.addNoteToMap(note);

        // X√≥a n·ªôi dung form v√† v·ªã tr√≠ ƒë√£ ch·ªçn
        document.getElementById('noteText').value = '';
        this.clearSelectedLocation();

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        const status = document.getElementById('locationStatus');
        status.textContent = '‚úÖ ƒê√£ t·∫°o ghi ch√∫ th√†nh c√¥ng! Nh·∫•n v√†o b·∫£n ƒë·ªì ƒë·ªÉ t·∫°o ghi ch√∫ m·ªõi.';
        status.className = 'location-status success';

        // L·∫•y ƒë·ªãa ch·ªâ t·ª´ t·ªça ƒë·ªô (reverse geocoding)
        this.getAddressFromCoords(note);

        setTimeout(() => {
            this.showInitialStatus();
        }, 3000);
    }

    // L·∫•y ƒë·ªãa ch·ªâ t·ª´ t·ªça ƒë·ªô
    async getAddressFromCoords(note) {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${note.lat}&lon=${note.lng}&zoom=18&addressdetails=1`);
            const data = await response.json();

            if (data && data.display_name) {
                note.address = data.display_name;
                this.saveNotes();
                this.renderNotesList(); // C·∫≠p nh·∫≠t danh s√°ch v·ªõi ƒë·ªãa ch·ªâ
            }
        } catch (error) {
            console.error('L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:', error);
        }
    }

    // Hi·ªÉn th·ªã ghi ch√∫ tr√™n b·∫£n ƒë·ªì
    displayNotesOnMap() {
        this.clearMapMarkers();
        this.notes.forEach(note => this.addNoteToMap(note));
    }

    // Th√™m m·ªôt ghi ch√∫ l√™n b·∫£n ƒë·ªì
    addNoteToMap(note) {
        const marker = L.marker([note.lat, note.lng], {
            icon: L.divIcon({
                className: 'note-marker',
                html: 'üìù',
                iconSize: [25, 25],
                iconAnchor: [12, 12]
            })
        }).addTo(this.map);

        const popupContent = `
            <div class="map-popup">
                <div class="popup-content-text">${note.content}</div>
                <div class="popup-time">${this.formatDateTime(note.timestamp)}</div>
                <button onclick="app.showNoteDetail(${note.id})" class="popup-detail-btn">Xem chi ti·∫øt</button>
            </div>
        `;

        marker.bindPopup(popupContent);
        this.markers.push({ marker, note });
    }

    // X√≥a t·∫•t c·∫£ marker tr√™n b·∫£n ƒë·ªì
    clearMapMarkers() {
        this.markers.forEach(({ marker }) => {
            this.map.removeLayer(marker);
        });
        this.markers = [];
    }

    // Render danh s√°ch ghi ch√∫
    renderNotesList() {
        const notesList = document.getElementById('notesList');

        if (this.notes.length === 0) {
            notesList.innerHTML = `
                <div class="text-center text-muted">
                    <p>Ch∆∞a c√≥ ghi ch√∫ n√†o. H√£y t·∫°o ghi ch√∫ ƒë·∫ßu ti√™n!</p>
                </div>
            `;
            return;
        }

        const notesHTML = this.notes
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
            .map(note => `
                <div class="note-item" onclick="app.showNoteDetail(${note.id})">
                    <div class="note-content">${note.content}</div>
                    <div class="note-meta">
                        <div class="note-location">
                            <span>üìç</span>
                            <span>${note.address || `${note.lat.toFixed(4)}, ${note.lng.toFixed(4)}`}</span>
                        </div>
                        <div class="note-time">${this.formatDateTime(note.timestamp)}</div>
                    </div>
                </div>
            `).join('');

        notesList.innerHTML = notesHTML;
    }

    // Hi·ªÉn th·ªã chi ti·∫øt ghi ch√∫
    showNoteDetail(noteId) {
        const note = this.notes.find(n => n.id === noteId);
        if (!note) return;

        this.currentNoteId = noteId;

        const modalContent = document.getElementById('modalNoteContent');
        modalContent.innerHTML = `
            <div class="modal-note-text">${note.content}</div>
            <div class="modal-note-details">
                <div class="modal-note-detail">
                    <span>üìç</span>
                    <span>${note.address || 'ƒêang t·∫£i ƒë·ªãa ch·ªâ...'}</span>
                </div>
                <div class="modal-note-detail">
                    <span>üåê</span>
                    <span>T·ªça ƒë·ªô: ${note.lat.toFixed(6)}, ${note.lng.toFixed(6)}</span>
                </div>
                <div class="modal-note-detail">
                    <span>üïí</span>
                    <span>${this.formatDateTime(note.timestamp)}</span>
                </div>
            </div>
        `;

        document.getElementById('noteModal').style.display = 'flex';

        // Center b·∫£n ƒë·ªì t·ªõi v·ªã tr√≠ ghi ch√∫
        this.map.setView([note.lat, note.lng], 16);
    }

    // ƒê√≥ng modal chi ti·∫øt
    closeNoteModal() {
        document.getElementById('noteModal').style.display = 'none';
        this.currentNoteId = null;
    }

    // M·ªü Google Maps
    openInGoogleMaps() {
        if (!this.currentNoteId) return;

        const note = this.notes.find(n => n.id === this.currentNoteId);
        if (!note) return;

        const url = `https://www.google.com/maps?q=${note.lat},${note.lng}`;
        window.open(url, '_blank');
    }

    // X√≥a ghi ch√∫
    deleteNote() {
        if (!this.currentNoteId) return;

        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ghi ch√∫ n√†y?')) return;

        this.notes = this.notes.filter(n => n.id !== this.currentNoteId);
        this.saveNotes();

        this.renderNotesList();
        this.updateNotesCount();
        this.displayNotesOnMap();
        this.closeNoteModal();
    }    // L·ªçc ghi ch√∫ theo b√°n k√≠nh (s·ª≠ d·ª•ng center c·ªßa b·∫£n ƒë·ªì)
    filterNotesByRadius(radius) {
        this.clearMapMarkers();

        if (radius === 'all') {
            this.displayNotesOnMap();
            return;
        }

        const center = this.map.getCenter();
        const radiusKm = parseInt(radius);
        const filteredNotes = this.notes.filter(note => {
            const distance = this.calculateDistance(
                center.lat, center.lng,
                note.lat, note.lng
            );
            return distance <= radiusKm;
        });

        filteredNotes.forEach(note => this.addNoteToMap(note));
    }

    // T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm (km)
    calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371; // B√°n k√≠nh Tr√°i ƒê·∫•t (km)
        const dLat = this.toRad(lat2 - lat1);
        const dLng = this.toRad(lng2 - lng1);
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) *
            Math.sin(dLng / 2) * Math.sin(dLng / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    toRad(deg) {
        return deg * (Math.PI / 180);
    }

    // ƒê∆∞a b·∫£n ƒë·ªì v·ªÅ v·ªã tr√≠ ng∆∞·ªùi d√πng
    centerMapToUser() {
        if (!this.userLocation) {
            this.getCurrentLocation();
            return;
        }

        this.map.setView([this.userLocation.lat, this.userLocation.lng], 15);
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ghi ch√∫
    updateNotesCount() {
        const count = this.notes.length;
        document.getElementById('notesCount').textContent =
            count === 0 ? '0 ghi ch√∫' :
                count === 1 ? '1 ghi ch√∫' :
                    `${count} ghi ch√∫`;
    }

    // Format th·ªùi gian
    formatDateTime(isoString) {
        const date = new Date(isoString);
        return date.toLocaleString('vi-VN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // L∆∞u ghi ch√∫ v√†o localStorage
    saveNotes() {
        localStorage.setItem('geoNotes', JSON.stringify(this.notes));
    }

    // Export ghi ch√∫ ra CSV
    exportNotes() {
        if (this.notes.length === 0) {
            alert('Kh√¥ng c√≥ ghi ch√∫ ƒë·ªÉ export');
            return;
        }

        const headers = ['N·ªôi dung', 'Latitude', 'Longitude', 'ƒê·ªãa ch·ªâ', 'Th·ªùi gian'];
        const csvContent = [
            headers.join(','),
            ...this.notes.map(note => [
                `"${note.content.replace(/"/g, '""')}"`,
                note.lat,
                note.lng,
                `"${(note.address || '').replace(/"/g, '""')}"`,
                `"${this.formatDateTime(note.timestamp)}"`
            ].join(','))
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `geo-notes-${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
    }

    // T√¨m ki·∫øm v·ªã tr√≠
    async searchLocation() {
        const query = document.getElementById('locationSearch').value.trim();
        const searchBtn = document.getElementById('searchBtn');
        const status = document.getElementById('locationStatus');

        if (!query) {
            alert('Vui l√≤ng nh·∫≠p t√™n ƒë·ªãa ƒëi·ªÉm c·∫ßn t√¨m');
            return;
        }

        // Disable button v√† hi·ªÉn th·ªã loading
        searchBtn.disabled = true;
        searchBtn.innerHTML = 'üîç ƒêang t√¨m...';
        status.textContent = `üîç ƒêang t√¨m ki·∫øm "${query}"...`;
        status.className = 'location-status loading';

        try {
            // S·ª≠ d·ª•ng Nominatim API ƒë·ªÉ geocoding
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&countrycodes=vn&addressdetails=1`);
            const results = await response.json();

            if (results.length === 0) {
                status.textContent = `‚ùå Kh√¥ng t√¨m th·∫•y "${query}". Th·ª≠ t√¨m v·ªõi t·ª´ kh√≥a kh√°c.`;
                status.className = 'location-status error';
                this.resetSearchButton();
                return;
            }

            // Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
            this.showSearchResults(results, query);

        } catch (error) {
            console.error('L·ªói t√¨m ki·∫øm:', error);
            status.textContent = '‚ùå L·ªói khi t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i.';
            status.className = 'location-status error';
            this.resetSearchButton();
        }
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
    showSearchResults(results, query) {
        const status = document.getElementById('locationStatus');

        if (results.length === 1) {
            // N·∫øu ch·ªâ c√≥ 1 k·∫øt qu·∫£, t·ª± ƒë·ªông ch·ªçn
            const result = results[0];
            this.selectSearchResult(result);
        } else {
            // N·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£, hi·ªÉn th·ªã danh s√°ch
            const resultsList = results.slice(0, 3).map((result, index) => {
                const displayName = result.display_name.split(',').slice(0, 3).join(', ');
                return `
                    <button onclick="app.selectSearchResultByIndex(${index})" class="search-result-btn">
                        üìç ${displayName}
                    </button>
                `;
            }).join('');

            status.innerHTML = `
                <div style="margin-bottom: 10px;">üîç T√¨m th·∫•y ${results.length} k·∫øt qu·∫£ cho "${query}":</div>
                <div class="search-results">
                    ${resultsList}
                </div>
            `;
            status.className = 'location-status';

            // L∆∞u results ƒë·ªÉ d√πng sau
            this.searchResults = results;
        }

        this.resetSearchButton();
    }

    // Ch·ªçn k·∫øt qu·∫£ t√¨m ki·∫øm theo index
    selectSearchResultByIndex(index) {
        if (this.searchResults && this.searchResults[index]) {
            this.selectSearchResult(this.searchResults[index]);
        }
    }

    // Ch·ªçn m·ªôt k·∫øt qu·∫£ t√¨m ki·∫øm
    selectSearchResult(result) {
        const lat = parseFloat(result.lat);
        const lng = parseFloat(result.lon);
        const displayName = result.display_name.split(',').slice(0, 3).join(', ');

        // Zoom ƒë·∫øn v·ªã tr√≠
        this.map.setView([lat, lng], 15);

        // Ch·ªçn v·ªã tr√≠ n√†y
        this.selectLocation(lat, lng);

        const status = document.getElementById('locationStatus');
        status.textContent = `üìç ƒê√£ ch·ªçn: ${displayName}`;
        status.className = 'location-status success';

        // Clear search input
        document.getElementById('locationSearch').value = '';

        // Clear search results
        this.searchResults = null;
    }

    // Reset search button
    resetSearchButton() {
        const searchBtn = document.getElementById('searchBtn');
        searchBtn.disabled = false;
        searchBtn.innerHTML = 'üîç T√¨m ki·∫øm';
    }

    // T√¨m ki·∫øm nhanh
    quickSearch(query) {
        document.getElementById('locationSearch').value = query;
        this.searchLocation();
    }
}

// Global functions
function closeNoteModal() {
    app.closeNoteModal();
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new GeoNotes();
});

// Export function cho debugging
window.exportGeoNotes = () => app.exportNotes();